;; problem file: problem-robot2.pddl
(define (problem robot2)
    (:domain robot2)
    (:objects lobby stairs groundLiving kitchen laundry groundBathroom masterBedroom privateBathroom drawer smallBedroom firstLiving charge_point2 charge_point1 robot2 robot1)
	(:init (is_adjacent lobby stairs) (is_adjacent lobby groundLiving) (is_adjacent stairs lobby) (is_adjacent stairs kitchen) (is_adjacent groundLiving lobby) (is_adjacent groundLiving kitchen) (is_adjacent kitchen groundLiving) (is_adjacent kitchen stairs) (is_adjacent kitchen laundry) (is_adjacent laundry groundBathroom) (is_adjacent laundry kitchen) (is_adjacent groundBathroom laundry) (is_adjacent masterBedroom privateBathroom) (is_adjacent masterBedroom drawer) (is_adjacent smallBedroom firstLiving) (is_adjacent privateBathroom drawer) (is_adjacent privateBathroom masterBedroom) (is_adjacent firstLiving smallBedroom) (is_adjacent firstLiving drawer) (is_adjacent drawer masterBedroom) (is_adjacent drawer firstLiving) (is_adjacent drawer privateBathroom) (chargePoint_in_room charge_point2 firstLiving) (chargePoint_in_room charge_point1 lobby) (is_in_current robot2 firstLiving) (is_in_current robot1 lobby) (is_in_charge_point charge_point2 robot2) (is_in_charge_point charge_point1 robot1) (needs_water lobby) (needs_water stairs) (needs_water groundLiving) (needs_water kitchen) (needs_water laundry) (needs_water groundBathroom) (needs_water masterBedroom) (needs_water smallBedroom) (needs_water privateBathroom) (needs_water firstLiving) (needs_water drawer))
	(:goal (and (not (needs_water masterBedroom)) (not (needs_water smallBedroom)) (not (needs_water privateBathroom)) (not (needs_water firstLiving)) (not (needs_water drawer)) (is_in_charge_point charge_point2 robot2)))
)
